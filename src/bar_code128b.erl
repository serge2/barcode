-module(bar_code128b).
-behaviour(barcode).

-export([
         encode/1
        ]).

% https://en.wikipedia.org/wiki/Code_128
% Code 128B characters
-define(CHAR_B, " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~").
% Code 128 values 0-102, expressed as bitfields
-define(CODE,
        {
         2#11011001100, 2#11001101100, 2#11001100110, 2#10010011000, 2#10010001100,     % 0 - 4
         2#10001001100, 2#10011001000, 2#10011000100, 2#10001100100, 2#11001001000,     % 5 - 9
         2#11001000100, 2#11000100100, 2#10110011100, 2#10011011100, 2#10011001110,     % 10 - 14
         2#10111001100, 2#10011101100, 2#10011100110, 2#11001110010, 2#11001011100,     % 15 - 19
         2#11001001110, 2#11011100100, 2#11001110100, 2#11101101110, 2#11101001100,     % 20 - 24
         2#11100101100, 2#11100100110, 2#11101100100, 2#11100110100, 2#11100110010,     % 25 - 29
         2#11011011000, 2#11011000110, 2#11000110110, 2#10100011000, 2#10001011000,     % 30 - 34
         2#10001000110, 2#10110001000, 2#10001101000, 2#10001100010, 2#11010001000,     % 35 - 39
         2#11000101000, 2#11000100010, 2#10110111000, 2#10110001110, 2#10001101110,     % 40 - 44
         2#10111011000, 2#10111000110, 2#10001110110, 2#11101110110, 2#11010001110,     % 45 - 49
         2#11000101110, 2#11011101000, 2#11011100010, 2#11011101110, 2#11101011000,     % 50 - 54
         2#11101000110, 2#11100010110, 2#11101101000, 2#11101100010, 2#11100011010,     % 55 - 59
         2#11101111010, 2#11001000010, 2#11110001010, 2#10100110000, 2#10100001100,     % 60 - 64
         2#10010110000, 2#10010000110, 2#10000101100, 2#10000100110, 2#10110010000,     % 65 - 69
         2#10110000100, 2#10011010000, 2#10011000010, 2#10000110100, 2#10000110010,     % 70 - 74
         2#11000010010, 2#11001010000, 2#11110111010, 2#11000010100, 2#10001111010,     % 75 - 79
         2#10100111100, 2#10010111100, 2#10010011110, 2#10111100100, 2#10011110100,     % 80 - 84
         2#10011110010, 2#11110100100, 2#11110010100, 2#11110010010, 2#11011011110,     % 85 - 89
         2#11011110110, 2#11110110110, 2#10101111000, 2#10100011110, 2#10001011110,     % 90 - 94
         2#10111101000, 2#10111100010, 2#11110101000, 2#11110100010, 2#10111011110,     % 95 - 99
         2#10111101110, 2#11101011110, 2#11110101110                                    % 100 - 102
        }).
-define(START_B, <<2#11010010000:11>>).
-define(STOP, <<2#1100011101011:13>>).

-spec encode(String :: unicode:chardata()) -> BarCodeBitmap :: bitstring().
encode(String) ->
    Chars = string:to_graphemes(String),
    {Bin, _, Sum} =
        lists:foldl(fun(Char, {Bin, I, Sum}) ->
                           Index = index(Char),
                           Code = translate(Index),
                           {<<Bin/bits, Code:11>>, I + 1, Sum + I * Index}
                    end, {<<>>, 1, 1}, Chars),
    CheckSumCode = translate(Sum rem 103),
    <<?START_B/bits, Bin/bits, CheckSumCode:11, ?STOP/bits>>.

-spec index(Char :: integer()) -> Position :: non_neg_integer().
index(Char) ->
    index(Char, ?CHAR_B, 0).

index(Char, [Char|_], Pos) -> Pos;
index(Char, List, Pos) -> index(Char, tl(List), Pos + 1).

translate(Index) ->
    element(Index + 1, ?CODE).
