%% == Erlang compiler options ==
{erl_opts, [
%%    no_debug_info,
%%    {i, "myinclude"},
%%    {platform_define, "(linux|solaris|freebsd|darwin)", 'HAVE_SENDFILE'},
%%    {platform_define, "(linux|freebsd)", 'BACKLOG', 128},
%%    {platform_define, "R13", 'old_inets'},
    debug_info,
    warn_bif_clash,
    warn_deprecated_function,
    warn_export_all,
    warn_export_vars,
    warn_exported_vars,
    warn_missing_spec,
    warn_obsolete_guard,
    warn_shadow_vars,
    warn_untyped_record,
    warn_unused_function,
    warn_unused_import,
    warn_unused_record,
    warn_unused_vars
]}.


%% == Dependencies ==

%% What dependencies we have, dependencies can be of 3 forms, an application
%% name as an atom, eg. mochiweb, a name and a version (from the .app file), or
%% an application name, a version and the SCM details on how to fetch it (SCM
%% type, location and revision).
%% Rebar3 currently supports git and hg
{deps, [
]}.


%% == Common Test ==

%% {erl_opts, [...]}, but for CT runs
{ct_compile_opts, []}.
%% {erl_first_files, ...} but for CT runs
{ct_first_files, []}.
%% Same options as for ct:run_test(Opts)
{ct_opts, [
%    {sys_config, "env/test.config"},
    {verbose, false}
]}.


%% == Cover ==

%% Whether to enable coverage reporting where commands support cover. Default
%% is `false'
{cover_enabled, true}.
%% Modules to exclude from cover
{cover_excl_mods, []}.
%% Options to pass to cover provider
{cover_opts, [{min_coverage, 80}, verbose]}.


%% == Dialyzer ==

{dialyzer, [
    {warnings, [
        error_handling,
        % no_behaviours,
        % no_contracts,
        % no_fail_call,
        % no_fun_app,
        % no_improper_lists,
        % no_match,
        % no_missing_calls,
        % no_opaque,
        % no_return,
        % no_undefined_callbacks,
        % no_unused,
        % overspecs,
        % specdiffs,
        race_conditions,
        % underspecs,
        unknown,
        unmatched_returns
    ]}
%%    {get_warnings, true},
%%    {plt_apps, top_level_deps}, % top_level_deps | all_deps
%%    {plt_extra_apps, [lager]}
%%    {plt_location, local}, % local | "/my/file/name"
%%    {plt_prefix, "rebar3"},
%%    {base_plt_apps, [stdlib, kernel, crypto]},
%%    {base_plt_location, global}, % global | "/my/file/name"
%%    {base_plt_prefix, "rebar3"}
]}.


%% == EDoc ==

%% EDoc options, same as those passed to the edoc compiler
%% when called by hand.
{edoc_opts, []}.


%% == EUnit ==

%% eunit:test(Tests)
%{eunit_tests, [{application, rebar3}]}.
%% Options for eunit:test(Tests, Opts)
%{eunit_opts, [verbose]}.
%% Additional compile options for eunit. erl_opts is also used
%{eunit_compile_opts, [{d, some_define}]}.
%% {erl_first_files, ...} but for Eunit
%{eunit_first_files, ["test/test_behaviour.erl"]}.


%% == Shell ==

%% apps to auto-boot with `rebar3 shell'; defaults to apps
%% specified in a `relx' tuple, if any.
{shell, [
%%    {config, "env/sys.config"},
    {apps, [
        barcode
    ]}
]}.

%% == xref ==

{xref_warnings, false}.

%% optional extra paths to include in xref:set_library_path/2.
%% specified relative location of rebar.config.
%% e.g. {xref_extra_paths,["../gtknode/src"]}
{xref_extra_paths,[]}.

%% xref checks to run
{xref_checks, [
    undefined_function_calls,
    undefined_functions,
    locals_not_used,
%    exports_not_used,
    deprecated_function_calls,
    deprecated_functions
]}.

%% Optional custom xref queries (xref manual has details) specified as
%%     {xref_queries, [{query_string(), expected_query_result()},...]}
%% The following for example removes all references to mod:*foo/4
%% functions from undefined external function calls as those are in a
%% generated module
{xref_queries,
 [{"(XC - UC) || (XU - X - B"
   " - (\"mod\":\".*foo\"/\"4\"))",[]}]}.



